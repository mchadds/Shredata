[{"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx":"1","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts":"2","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx":"3","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx":"4","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx":"5","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx":"6","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx":"7","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx":"8"},{"size":1731,"mtime":1610315254509,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":7496,"mtime":1610324827064,"results":"12","hashOfConfig":"10"},{"size":6173,"mtime":1610325205644,"results":"13","hashOfConfig":"10"},{"size":5418,"mtime":1610320513742,"results":"14","hashOfConfig":"10"},{"size":3394,"mtime":1609859968605,"results":"15","hashOfConfig":"10"},{"size":3370,"mtime":1609859968606,"results":"16","hashOfConfig":"10"},{"size":5633,"mtime":1609815079956,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"1356jc6",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx",["42"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n\r\n// import * as React from 'react';\r\n// import * as ReactDom from 'react-dom';\r\n// import * as Highcharts from 'highcharts';\r\n// import HighchartsReact from 'highcharts-react-official';\r\n\r\n// // The wrapper exports only a default component class that at the same time is a\r\n// // namespace for the related Props interface (HighchartsReact.Props). All other\r\n// // interfaces like Options come from the Highcharts module itself.\r\n\r\n// const options: Highcharts.Options = {\r\n//     title: {\r\n//         text: 'My chart'\r\n//     },\r\n//     series: [\r\n//         {\r\n//             type: 'line',\r\n//             data: [1, 2, 3]\r\n//         }\r\n//     ]\r\n// };\r\n\r\n// // React supports function components as a simple way to write components that\r\n// // only contain a render method without any state (the App component in this\r\n// // example).\r\n\r\n// const App = (props: HighchartsReact.Props) => (\r\n//     <div>\r\n//         <HighchartsReact highcharts={Highcharts} options={options} {...props} />\r\n//     </div>\r\n// );\r\n\r\n// // Render your App component into the #root element of the document.\r\n\r\n// ReactDom.render(<App />, document.getElementById('root'));\r\n",["43","44"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts",[],["45","46"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx",["47","48","49","50","51","52","53","54","55"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx",["56","57","58","59","60","61","62"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx",["63","64","65","66","67"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\nimport { point } from 'leaflet';\r\n\r\nclass TwentyFourHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    // props = {\r\n    //     resorts: [\r\n    //         {\r\n    //             _id: 0,\r\n    //             latitude: 0,\r\n    //             longitude: 0,\r\n    //             snowreport: {\r\n    //                 updateTime: Date.now() - 1,\r\n    //                 values: {\r\n    //                     past24Hours: 0,\r\n    //                     past48Hours: 0,\r\n    //                     past7Days: 0\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     ]\r\n    // };\r\n\r\n    props = {\r\n        seriesData: null,\r\n        interval: ''\r\n    };\r\n\r\n    // create24HourSnowfallSeries(resorts: any) {\r\n    //     return resorts.map((resort: { _id: any; snowreport: { values: { past24Hours: any } } }) => {\r\n    //         return {\r\n    //             name: resort._id,\r\n    //             y: resort.snowreport.values.past24Hours\r\n    //         };\r\n    //     });\r\n    // }\r\n\r\n    createHighChartOptions(\r\n        //resorts: any\r\n        seriesData: any,\r\n        interval: string\r\n    ) {\r\n        const options: Highcharts.Options = {\r\n            chart: {\r\n                height: '73%'\r\n            },\r\n            title: {\r\n                text: 'Past ' + interval + ' Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal',\r\n                    point: {\r\n                        events: {\r\n                            mouseOver: function (e) {\r\n                                let currentSelection = this.name;\r\n                                this.series.points.forEach(function (pt) {\r\n                                    if (pt.name != currentSelection) {\r\n                                        pt.setState('inactive');\r\n                                    } else {\r\n                                        pt.setState('hover');\r\n                                    }\r\n                                });\r\n                            },\r\n                            mouseOut: function (e) {\r\n                                let currentSelection = this.name;\r\n                                this.series.points.forEach(function (pt) {\r\n                                    pt.setState('');\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    //allowPointSelect: true\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: seriesData\r\n                    //data: this.create24HourSnowfallSeries(resorts)\r\n                    // point: {\r\n                    //     events: {\r\n                    //         click: (e) => {\r\n                    //             console.log(e.point.name);\r\n                    //             console.log(this);\r\n                    //             //e.point.color = '#a4edba';\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        // const { resorts } = this.props;\r\n        // this.options = this.createHighChartOptions(resorts);\r\n        const { seriesData, interval } = this.props;\r\n        this.options = this.createHighChartOptions(seriesData, interval);\r\n        console.log(this.props);\r\n        return (\r\n            <div style={{ width: '45%', float: 'left', border: '4px solid silver', marginTop: '5vh' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TwentyFourHourSnowChart;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx",["68","69"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass FourtyEightHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create48HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past48Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past48Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 48 Hours Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create48HourSnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourtyEightHourSnowChart;\r\n",["70","71"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx",["72","73"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass SevenDaySnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create7DaySnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past7Days: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past7Days\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 7 Days Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create7DaySnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SevenDaySnowChart;\r\n",["74","75"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx",["76","77","78"],{"ruleId":"79","severity":1,"message":"80","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":23},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"83","replacedBy":"87"},{"ruleId":"85","replacedBy":"88"},{"ruleId":"79","severity":1,"message":"89","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":32},{"ruleId":"79","severity":1,"message":"90","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":25},{"ruleId":"79","severity":1,"message":"91","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":35},{"ruleId":"79","severity":1,"message":"92","line":8,"column":10,"nodeType":"81","messageId":"82","endLine":8,"endColumn":16},{"ruleId":"79","severity":1,"message":"93","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":24},{"ruleId":"79","severity":1,"message":"94","line":10,"column":8,"nodeType":"81","messageId":"82","endLine":10,"endColumn":19},{"ruleId":"95","severity":1,"message":"96","line":75,"column":22,"nodeType":"97","messageId":"98","endLine":75,"endColumn":24},{"ruleId":"95","severity":1,"message":"96","line":77,"column":29,"nodeType":"97","messageId":"98","endLine":77,"endColumn":31},{"ruleId":"95","severity":1,"message":"96","line":79,"column":29,"nodeType":"97","messageId":"98","endLine":79,"endColumn":31},{"ruleId":"79","severity":1,"message":"99","line":3,"column":21,"nodeType":"81","messageId":"82","endLine":3,"endColumn":27},{"ruleId":"79","severity":1,"message":"100","line":3,"column":43,"nodeType":"81","messageId":"82","endLine":3,"endColumn":48},{"ruleId":"79","severity":1,"message":"101","line":3,"column":73,"nodeType":"81","messageId":"82","endLine":3,"endColumn":85},{"ruleId":"79","severity":1,"message":"102","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":18},{"ruleId":"95","severity":1,"message":"96","line":50,"column":22,"nodeType":"97","messageId":"98","endLine":50,"endColumn":24},{"ruleId":"95","severity":1,"message":"96","line":52,"column":29,"nodeType":"97","messageId":"98","endLine":52,"endColumn":31},{"ruleId":"95","severity":1,"message":"96","line":54,"column":29,"nodeType":"97","messageId":"98","endLine":54,"endColumn":31},{"ruleId":"79","severity":1,"message":"103","line":3,"column":13,"nodeType":"81","messageId":"82","endLine":3,"endColumn":21},{"ruleId":"79","severity":1,"message":"104","line":6,"column":10,"nodeType":"81","messageId":"82","endLine":6,"endColumn":65},{"ruleId":"79","severity":1,"message":"105","line":7,"column":10,"nodeType":"81","messageId":"82","endLine":7,"endColumn":15},{"ruleId":"95","severity":1,"message":"106","line":77,"column":49,"nodeType":"97","messageId":"98","endLine":77,"endColumn":51},{"ruleId":"79","severity":1,"message":"107","line":85,"column":37,"nodeType":"81","messageId":"82","endLine":85,"endColumn":53},{"ruleId":"79","severity":1,"message":"103","line":3,"column":13,"nodeType":"81","messageId":"82","endLine":3,"endColumn":21},{"ruleId":"79","severity":1,"message":"104","line":6,"column":10,"nodeType":"81","messageId":"82","endLine":6,"endColumn":65},{"ruleId":"83","replacedBy":"108"},{"ruleId":"85","replacedBy":"109"},{"ruleId":"79","severity":1,"message":"103","line":3,"column":13,"nodeType":"81","messageId":"82","endLine":3,"endColumn":21},{"ruleId":"79","severity":1,"message":"104","line":6,"column":10,"nodeType":"81","messageId":"82","endLine":6,"endColumn":65},{"ruleId":"83","replacedBy":"110"},{"ruleId":"85","replacedBy":"111"},{"ruleId":"79","severity":1,"message":"103","line":3,"column":13,"nodeType":"81","messageId":"82","endLine":3,"endColumn":21},{"ruleId":"79","severity":1,"message":"104","line":6,"column":10,"nodeType":"81","messageId":"82","endLine":6,"endColumn":65},{"ruleId":"112","severity":1,"message":"113","line":100,"column":133,"nodeType":"114","messageId":"115","endLine":100,"endColumn":135},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["116"],"no-negated-in-lhs",["117"],["116"],["117"],"'FourtyEightHourSnowChart' is defined but never used.","'SevenDaySnowChart' is defined but never used.","'IntervalSnowChartComparison' is defined but never used.","'format' is defined but never used.","'SelectCallback' is defined but never used.","'ButtonGroup' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Marker' is defined but never used.","'Popup' is defined but never used.","'useMapEvents' is defined but never used.","'threadId' is defined but never used.","'ReactDom' is defined but never used.","'ResolvedTypeReferenceDirectiveWithFailedLookupLocations' is defined but never used.","'point' is defined but never used.","Expected '!==' and instead saw '!='.","'currentSelection' is assigned a value but never used.",["116"],["117"],["116"],["117"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]