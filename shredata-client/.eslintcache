[{"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx":"1","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts":"2","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx":"3","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx":"4","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx":"5","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx":"6","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx":"7","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx":"8"},{"size":1731,"mtime":1610315254509,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":7496,"mtime":1610326264523,"results":"12","hashOfConfig":"10"},{"size":6458,"mtime":1610415352298,"results":"13","hashOfConfig":"10"},{"size":5418,"mtime":1610326264528,"results":"14","hashOfConfig":"10"},{"size":3394,"mtime":1609859968605,"results":"15","hashOfConfig":"10"},{"size":3370,"mtime":1609859968606,"results":"16","hashOfConfig":"10"},{"size":5633,"mtime":1609815079956,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"1356jc6",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx",["43"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n\r\n// import * as React from 'react';\r\n// import * as ReactDom from 'react-dom';\r\n// import * as Highcharts from 'highcharts';\r\n// import HighchartsReact from 'highcharts-react-official';\r\n\r\n// // The wrapper exports only a default component class that at the same time is a\r\n// // namespace for the related Props interface (HighchartsReact.Props). All other\r\n// // interfaces like Options come from the Highcharts module itself.\r\n\r\n// const options: Highcharts.Options = {\r\n//     title: {\r\n//         text: 'My chart'\r\n//     },\r\n//     series: [\r\n//         {\r\n//             type: 'line',\r\n//             data: [1, 2, 3]\r\n//         }\r\n//     ]\r\n// };\r\n\r\n// // React supports function components as a simple way to write components that\r\n// // only contain a render method without any state (the App component in this\r\n// // example).\r\n\r\n// const App = (props: HighchartsReact.Props) => (\r\n//     <div>\r\n//         <HighchartsReact highcharts={Highcharts} options={options} {...props} />\r\n//     </div>\r\n// );\r\n\r\n// // Render your App component into the #root element of the document.\r\n\r\n// ReactDom.render(<App />, document.getElementById('root'));\r\n",["44","45"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts",[],["46","47"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx",["48","49","50","51","52","53","54","55","56"],"import React, { Component } from 'react';\r\nimport Map from './components/Map';\r\nimport TwentyFourHourSnowChart from './components/TwentyFourHourSnowChart';\r\nimport FourtyEightHourSnowChart from './components/FourtyEightHourSnowChart';\r\nimport SevenDaySnowChart from './components/SevenDaySnowChart';\r\nimport IntervalSnowChartComparison from './components/IntervalSnowChartComparison';\r\nimport './App.css';\r\nimport { format } from 'highcharts';\r\nimport { SelectCallback } from 'react-bootstrap/esm/helpers';\r\nimport ButtonGroup from 'react-bootstrap/esm/ButtonGroup';\r\nimport Button from 'react-bootstrap/esm/Button';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        response: {\r\n            resorts: [\r\n                {\r\n                    _id: 0,\r\n                    latitude: 0,\r\n                    longitude: 0,\r\n                    snowreport: {\r\n                        updateTime: Date.now() - 1,\r\n                        values: {\r\n                            past24Hours: 0,\r\n                            past48Hours: 0,\r\n                            past7Days: 0,\r\n                            base: 0\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        post: '',\r\n        responseToPost: '',\r\n        interval: '24 Hours'\r\n    };\r\n\r\n    createBaseSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { base: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.base\r\n            };\r\n        });\r\n    }\r\n\r\n    create24HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past24Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past24Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    create48HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past48Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past48Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    create7DaySnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past7Days: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past7Days\r\n            };\r\n        });\r\n    }\r\n\r\n    createIntervalSnowfallSeries(interval: string, resorts: any) {\r\n        if (interval == '48 Hours') {\r\n            return this.create48HourSnowfallSeries(resorts);\r\n        } else if (interval == '7 Days') {\r\n            return this.create7DaySnowfallSeries(resorts);\r\n        } else if (interval == 'Base') {\r\n            return this.createBaseSnowfallSeries(resorts);\r\n        } else {\r\n            return this.create24HourSnowfallSeries(resorts);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.callApi()\r\n            .then((res) => this.setState({ response: res }))\r\n            .catch((err) => console.log(err));\r\n    }\r\n\r\n    callApi = async () => {\r\n        const response = await fetch('/api/resorts/get/snowReportsByResort');\r\n        const body = await response.json();\r\n        if (response.status !== 200) throw Error(body.message);\r\n\r\n        return body;\r\n    };\r\n\r\n    handleSubmit = async (e: { preventDefault: () => void }) => {\r\n        e.preventDefault();\r\n        const response = await fetch('/api/world', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ post: this.state.post })\r\n        });\r\n        const body = await response.text();\r\n\r\n        this.setState({ responseToPost: body });\r\n    };\r\n\r\n    handleIntervalSelect(e: any) {\r\n        const state = this.state;\r\n        state.interval = e;\r\n        //this.state.interval = e.eventKey;\r\n        this.setState({ state });\r\n        //return e;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/* <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <p>\r\n                        Edit <code>src/App.js</code> and save to reload.\r\n                    </p>\r\n                    <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        Learn React\r\n                    </a>\r\n                </header>\r\n                <p>{this.state.response}</p>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <p>\r\n                        <strong>Post to Server:</strong>\r\n                    </p>\r\n                    <input type=\"text\" value={this.state.post} onChange={(e) => this.setState({ post: e.target.value })} />\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n                <p>{this.state.responseToPost}</p> */}\r\n                <main className=\"container\">\r\n                    <h1 style={{ color: 'white' }}>Snow Intelligence</h1>\r\n                    {/* <ButtonGroup style={{ marginTop: '5vh' }} size=\"lg\" className=\"mb-2\"> */}\r\n                    <Button style={{ border: '2px solid black', marginTop: '5vh', marginRight: '1%' }} onClick={() => this.handleIntervalSelect('24 Hours')}>\r\n                        24 Hours\r\n                    </Button>\r\n                    <Button style={{ border: '2px solid black', marginTop: '5vh', marginRight: '1%' }} onClick={() => this.handleIntervalSelect('48 Hours')}>\r\n                        48 Hours\r\n                    </Button>\r\n                    <Button style={{ border: '2px solid black', marginTop: '5vh', marginRight: '1%' }} onClick={() => this.handleIntervalSelect('7 Days')}>\r\n                        7 Days\r\n                    </Button>\r\n                    <Button style={{ border: '2px solid black', marginTop: '5vh' }} onClick={() => this.handleIntervalSelect('Base')}>\r\n                        Base\r\n                    </Button>\r\n                    {/* </ButtonGroup> */}\r\n                    {/* <button onClick={() => this.handleDropdownSelect('24 Hours')}>24 Hours</button>\r\n                    <button onClick={() => this.handleDropdownSelect('48 Hours')}>48 Hours</button>\r\n                    <button onClick={() => this.handleDropdownSelect('7 Days')}>7 Days</button> */}\r\n                    {/* <IntervalDropdown\r\n                        //onSelect={this.handleDropdownSelect(this.state)}\r\n                        handleDropdownSelect={(e: any) => this.handleDropdownSelect(e)}\r\n                        // handleDropdownSelect={this.handleDropdownSelect()}\r\n                    /> */}\r\n                    <Map state={this.state} />\r\n                    {/* <TwentyFourHourSnowChart resorts={this.state.response.resorts} /> */}\r\n                    <TwentyFourHourSnowChart seriesData={this.createIntervalSnowfallSeries(this.state.interval, this.state.response.resorts)} interval={this.state.interval} />\r\n                    {/* <FourtyEightHourSnowChart resorts={this.state.response.resorts} /> */}\r\n                    {/* <SevenDaySnowChart resorts={this.state.response.resorts} /> */}\r\n                    {/* <IntervalSnowChartComparison resorts={this.state.response.resorts} /> */}\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx",["57","58","59","60","61","62","63","64","65","66","67"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx",["68","69","70","71","72"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\nimport { point } from 'leaflet';\r\n\r\nclass TwentyFourHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    // props = {\r\n    //     resorts: [\r\n    //         {\r\n    //             _id: 0,\r\n    //             latitude: 0,\r\n    //             longitude: 0,\r\n    //             snowreport: {\r\n    //                 updateTime: Date.now() - 1,\r\n    //                 values: {\r\n    //                     past24Hours: 0,\r\n    //                     past48Hours: 0,\r\n    //                     past7Days: 0\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     ]\r\n    // };\r\n\r\n    props = {\r\n        seriesData: null,\r\n        interval: ''\r\n    };\r\n\r\n    // create24HourSnowfallSeries(resorts: any) {\r\n    //     return resorts.map((resort: { _id: any; snowreport: { values: { past24Hours: any } } }) => {\r\n    //         return {\r\n    //             name: resort._id,\r\n    //             y: resort.snowreport.values.past24Hours\r\n    //         };\r\n    //     });\r\n    // }\r\n\r\n    createHighChartOptions(\r\n        //resorts: any\r\n        seriesData: any,\r\n        interval: string\r\n    ) {\r\n        const options: Highcharts.Options = {\r\n            chart: {\r\n                height: '73%'\r\n            },\r\n            title: {\r\n                text: 'Past ' + interval + ' Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal',\r\n                    point: {\r\n                        events: {\r\n                            mouseOver: function (e) {\r\n                                let currentSelection = this.name;\r\n                                this.series.points.forEach(function (pt) {\r\n                                    if (pt.name != currentSelection) {\r\n                                        pt.setState('inactive');\r\n                                    } else {\r\n                                        pt.setState('hover');\r\n                                    }\r\n                                });\r\n                            },\r\n                            mouseOut: function (e) {\r\n                                let currentSelection = this.name;\r\n                                this.series.points.forEach(function (pt) {\r\n                                    pt.setState('');\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    //allowPointSelect: true\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: seriesData\r\n                    //data: this.create24HourSnowfallSeries(resorts)\r\n                    // point: {\r\n                    //     events: {\r\n                    //         click: (e) => {\r\n                    //             console.log(e.point.name);\r\n                    //             console.log(this);\r\n                    //             //e.point.color = '#a4edba';\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        // const { resorts } = this.props;\r\n        // this.options = this.createHighChartOptions(resorts);\r\n        const { seriesData, interval } = this.props;\r\n        this.options = this.createHighChartOptions(seriesData, interval);\r\n        console.log(this.props);\r\n        return (\r\n            <div style={{ width: '45%', float: 'left', border: '4px solid silver', marginTop: '5vh' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TwentyFourHourSnowChart;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx",["73","74"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass FourtyEightHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create48HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past48Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past48Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 48 Hours Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create48HourSnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourtyEightHourSnowChart;\r\n",["75","76"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx",["77","78"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass SevenDaySnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create7DaySnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past7Days: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past7Days\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 7 Days Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create7DaySnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SevenDaySnowChart;\r\n",["79","80"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx",["81","82","83"],{"ruleId":"84","severity":1,"message":"85","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":23},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"88","replacedBy":"92"},{"ruleId":"90","replacedBy":"93"},{"ruleId":"84","severity":1,"message":"94","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":32},{"ruleId":"84","severity":1,"message":"95","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":25},{"ruleId":"84","severity":1,"message":"96","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":35},{"ruleId":"84","severity":1,"message":"97","line":8,"column":10,"nodeType":"86","messageId":"87","endLine":8,"endColumn":16},{"ruleId":"84","severity":1,"message":"98","line":9,"column":10,"nodeType":"86","messageId":"87","endLine":9,"endColumn":24},{"ruleId":"84","severity":1,"message":"99","line":10,"column":8,"nodeType":"86","messageId":"87","endLine":10,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":75,"column":22,"nodeType":"102","messageId":"103","endLine":75,"endColumn":24},{"ruleId":"100","severity":1,"message":"101","line":77,"column":29,"nodeType":"102","messageId":"103","endLine":77,"endColumn":31},{"ruleId":"100","severity":1,"message":"101","line":79,"column":29,"nodeType":"102","messageId":"103","endLine":79,"endColumn":31},{"ruleId":"84","severity":1,"message":"104","line":3,"column":21,"nodeType":"86","messageId":"87","endLine":3,"endColumn":27},{"ruleId":"84","severity":1,"message":"105","line":3,"column":43,"nodeType":"86","messageId":"87","endLine":3,"endColumn":48},{"ruleId":"84","severity":1,"message":"106","line":3,"column":73,"nodeType":"86","messageId":"87","endLine":3,"endColumn":85},{"ruleId":"84","severity":1,"message":"107","line":4,"column":10,"nodeType":"86","messageId":"87","endLine":4,"endColumn":18},{"ruleId":"84","severity":1,"message":"108","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":9},{"ruleId":"84","severity":1,"message":"109","line":5,"column":13,"nodeType":"86","messageId":"87","endLine":5,"endColumn":19},{"ruleId":"84","severity":1,"message":"110","line":5,"column":21,"nodeType":"86","messageId":"87","endLine":5,"endColumn":27},{"ruleId":"84","severity":1,"message":"111","line":5,"column":29,"nodeType":"86","messageId":"87","endLine":5,"endColumn":32},{"ruleId":"100","severity":1,"message":"101","line":51,"column":22,"nodeType":"102","messageId":"103","endLine":51,"endColumn":24},{"ruleId":"100","severity":1,"message":"101","line":53,"column":29,"nodeType":"102","messageId":"103","endLine":53,"endColumn":31},{"ruleId":"100","severity":1,"message":"101","line":55,"column":29,"nodeType":"102","messageId":"103","endLine":55,"endColumn":31},{"ruleId":"84","severity":1,"message":"112","line":3,"column":13,"nodeType":"86","messageId":"87","endLine":3,"endColumn":21},{"ruleId":"84","severity":1,"message":"113","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":65},{"ruleId":"84","severity":1,"message":"114","line":7,"column":10,"nodeType":"86","messageId":"87","endLine":7,"endColumn":15},{"ruleId":"100","severity":1,"message":"115","line":77,"column":49,"nodeType":"102","messageId":"103","endLine":77,"endColumn":51},{"ruleId":"84","severity":1,"message":"116","line":85,"column":37,"nodeType":"86","messageId":"87","endLine":85,"endColumn":53},{"ruleId":"84","severity":1,"message":"112","line":3,"column":13,"nodeType":"86","messageId":"87","endLine":3,"endColumn":21},{"ruleId":"84","severity":1,"message":"113","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":65},{"ruleId":"88","replacedBy":"117"},{"ruleId":"90","replacedBy":"118"},{"ruleId":"84","severity":1,"message":"112","line":3,"column":13,"nodeType":"86","messageId":"87","endLine":3,"endColumn":21},{"ruleId":"84","severity":1,"message":"113","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":65},{"ruleId":"88","replacedBy":"119"},{"ruleId":"90","replacedBy":"120"},{"ruleId":"84","severity":1,"message":"112","line":3,"column":13,"nodeType":"86","messageId":"87","endLine":3,"endColumn":21},{"ruleId":"84","severity":1,"message":"113","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":65},{"ruleId":"121","severity":1,"message":"122","line":100,"column":133,"nodeType":"123","messageId":"124","endLine":100,"endColumn":135},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["125"],"no-negated-in-lhs",["126"],["125"],["126"],"'FourtyEightHourSnowChart' is defined but never used.","'SevenDaySnowChart' is defined but never used.","'IntervalSnowChartComparison' is defined but never used.","'format' is defined but never used.","'SelectCallback' is defined but never used.","'ButtonGroup' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Marker' is defined but never used.","'Popup' is defined but never used.","'useMapEvents' is defined but never used.","'threadId' is defined but never used.","'L' is defined but never used.","'circle' is defined but never used.","'LatLng' is defined but never used.","'map' is defined but never used.","'ReactDom' is defined but never used.","'ResolvedTypeReferenceDirectiveWithFailedLookupLocations' is defined but never used.","'point' is defined but never used.","Expected '!==' and instead saw '!='.","'currentSelection' is assigned a value but never used.",["125"],["126"],["125"],["126"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]