[{"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx":"1","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts":"2","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx":"3","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx":"4","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx":"5","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx":"6","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx":"7","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx":"8","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalDropDown.tsx":"9","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalDropdown.tsx":"10"},{"size":1731,"mtime":1609864103042,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":5929,"mtime":1610116012717,"results":"14","hashOfConfig":"12"},{"size":4833,"mtime":1610131705419,"results":"15","hashOfConfig":"12"},{"size":4080,"mtime":1610132427188,"results":"16","hashOfConfig":"12"},{"size":3394,"mtime":1609859968605,"results":"17","hashOfConfig":"12"},{"size":3370,"mtime":1609859968606,"results":"18","hashOfConfig":"12"},{"size":5633,"mtime":1609815079956,"results":"19","hashOfConfig":"12"},{"size":1210,"mtime":1609946136775,"results":"20","hashOfConfig":"12"},{"size":1381,"mtime":1610073334397,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"1356jc6",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx",["52"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n\r\n// import * as React from 'react';\r\n// import * as ReactDom from 'react-dom';\r\n// import * as Highcharts from 'highcharts';\r\n// import HighchartsReact from 'highcharts-react-official';\r\n\r\n// // The wrapper exports only a default component class that at the same time is a\r\n// // namespace for the related Props interface (HighchartsReact.Props). All other\r\n// // interfaces like Options come from the Highcharts module itself.\r\n\r\n// const options: Highcharts.Options = {\r\n//     title: {\r\n//         text: 'My chart'\r\n//     },\r\n//     series: [\r\n//         {\r\n//             type: 'line',\r\n//             data: [1, 2, 3]\r\n//         }\r\n//     ]\r\n// };\r\n\r\n// // React supports function components as a simple way to write components that\r\n// // only contain a render method without any state (the App component in this\r\n// // example).\r\n\r\n// const App = (props: HighchartsReact.Props) => (\r\n//     <div>\r\n//         <HighchartsReact highcharts={Highcharts} options={options} {...props} />\r\n//     </div>\r\n// );\r\n\r\n// // Render your App component into the #root element of the document.\r\n\r\n// ReactDom.render(<App />, document.getElementById('root'));\r\n",["53","54"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts",[],["55","56"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx",["57","58","59","60","61","62","63","64"],"import React, { Component } from 'react';\r\nimport Map from './components/Map';\r\nimport TwentyFourHourSnowChart from './components/TwentyFourHourSnowChart';\r\nimport FourtyEightHourSnowChart from './components/FourtyEightHourSnowChart';\r\nimport SevenDaySnowChart from './components/SevenDaySnowChart';\r\nimport IntervalSnowChartComparison from './components/IntervalSnowChartComparison';\r\nimport IntervalDropdown from './components/IntervalDropdown';\r\nimport './App.css';\r\nimport { format } from 'highcharts';\r\nimport { SelectCallback } from 'react-bootstrap/esm/helpers';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        response: {\r\n            resorts: [\r\n                {\r\n                    _id: 0,\r\n                    latitude: 0,\r\n                    longitude: 0,\r\n                    snowreport: {\r\n                        updateTime: Date.now() - 1,\r\n                        values: {\r\n                            past24Hours: 0,\r\n                            past48Hours: 0,\r\n                            past7Days: 0\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        post: '',\r\n        responseToPost: '',\r\n        interval: '24 Hours'\r\n    };\r\n\r\n    create24HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past24Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past24Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    create48HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past48Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past48Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    create7DaySnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past7Days: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past7Days\r\n            };\r\n        });\r\n    }\r\n\r\n    createIntervalSnowfallSeries(interval: string, resorts: any) {\r\n        if (interval == '48 Hours') {\r\n            return this.create48HourSnowfallSeries(resorts);\r\n        } else if (interval == '7 Days') {\r\n            return this.create7DaySnowfallSeries(resorts);\r\n        } else {\r\n            return this.create24HourSnowfallSeries(resorts);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.callApi()\r\n            .then((res) => this.setState({ response: res }))\r\n            .catch((err) => console.log(err));\r\n    }\r\n\r\n    callApi = async () => {\r\n        const response = await fetch('/api/resorts/get/snowReportsByResort');\r\n        const body = await response.json();\r\n        if (response.status !== 200) throw Error(body.message);\r\n\r\n        return body;\r\n    };\r\n\r\n    handleSubmit = async (e: { preventDefault: () => void }) => {\r\n        e.preventDefault();\r\n        const response = await fetch('/api/world', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ post: this.state.post })\r\n        });\r\n        const body = await response.text();\r\n\r\n        this.setState({ responseToPost: body });\r\n    };\r\n\r\n    handleDropdownSelect(e: any) {\r\n        const state = this.state;\r\n        state.interval = e;\r\n        //this.state.interval = e.eventKey;\r\n        debugger;\r\n        this.setState({ state });\r\n        //return e;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/* <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <p>\r\n                        Edit <code>src/App.js</code> and save to reload.\r\n                    </p>\r\n                    <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        Learn React\r\n                    </a>\r\n                </header>\r\n                <p>{this.state.response}</p>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <p>\r\n                        <strong>Post to Server:</strong>\r\n                    </p>\r\n                    <input type=\"text\" value={this.state.post} onChange={(e) => this.setState({ post: e.target.value })} />\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n                <p>{this.state.responseToPost}</p> */}\r\n                <main>\r\n                    <button onClick={() => this.handleDropdownSelect('24 Hours')}>24 Hours</button>\r\n                    <button onClick={() => this.handleDropdownSelect('48 Hours')}>48 Hours</button>\r\n                    <button onClick={() => this.handleDropdownSelect('7 Days')}>7 Days</button>\r\n                    {/* <IntervalDropdown\r\n                        //onSelect={this.handleDropdownSelect(this.state)}\r\n                        handleDropdownSelect={(e: any) => this.handleDropdownSelect(e)}\r\n                        // handleDropdownSelect={this.handleDropdownSelect()}\r\n                    /> */}\r\n                    <Map state={this.state} />\r\n                    {/* <TwentyFourHourSnowChart resorts={this.state.response.resorts} /> */}\r\n                    <TwentyFourHourSnowChart seriesData={this.createIntervalSnowfallSeries(this.state.interval, this.state.response.resorts)} interval={this.state.interval} />\r\n                    {/* <FourtyEightHourSnowChart resorts={this.state.response.resorts} /> */}\r\n                    {/* <SevenDaySnowChart resorts={this.state.response.resorts} /> */}\r\n                    {/* <IntervalSnowChartComparison resorts={this.state.response.resorts} /> */}\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx",["65","66","67","68","69"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { TileLayer, Marker, CircleMarker, Popup, MapContainer, Tooltip, useMapEvents } from 'react-leaflet';\r\n\r\nclass Map extends Component {\r\n    // this method can decide whether an ajax call should be made to get new data based on props and state objects\r\n    //   componentDidUpdate(prevProps, prevState) {\r\n    //     console.log('prevProps', prevProps);\r\n    //     console.log('prevState', prevState);\r\n    //     if (prevProps.counter.value !== this.props.counter.value) {\r\n    //       // Ajax call and get new data\r\n    //     }\r\n    //   }\r\n    //   // opportunity to do any clean up before componenet is removed from the DOM - otherwise will end up with memory leaks\r\n    //   componentWillUnmount() {\r\n    //     console.log('Counter - Unmount');\r\n    //   }\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    props = {\r\n        state: {\r\n            response: {\r\n                resorts: [\r\n                    {\r\n                        _id: 0,\r\n                        latitude: 0,\r\n                        longitude: 0,\r\n                        snowreport: {\r\n                            updateTime: Date.now() - 1,\r\n                            values: {\r\n                                past24Hours: 0,\r\n                                past48Hours: 0,\r\n                                past7Days: 0\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            interval: '24 Hours'\r\n        }\r\n    };\r\n\r\n    getIntervalSnowFallValue(interval: string, resort: any) {\r\n        if (interval == '48 Hours') {\r\n            return resort.snowreport.values.past48Hours ? !null : 0;\r\n        } else if (interval == '7 Days') {\r\n            return resort.snowreport.values.past7Days;\r\n        } else {\r\n            return resort.snowreport.values.past24Hours;\r\n        }\r\n    }\r\n\r\n    //  map = useMapEvent('click', () => {\r\n    //     map.setCenter([50.5, 30.5])\r\n    //   })\r\n\r\n    render() {\r\n        const { interval } = this.props.state;\r\n        const { resorts } = this.props.state.response;\r\n        return (\r\n            <div>\r\n                <MapContainer center={[50.82793, -116.84341]} zoom={7.4} scrollWheelZoom={false}>\r\n                    <TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    {resorts.map((resort) => (\r\n                        <CircleMarker\r\n                            key={resort._id}\r\n                            center={[resort.latitude, resort.longitude]}\r\n                            radius={10 + this.getIntervalSnowFallValue(interval, resort) / 1.4}\r\n                            fillOpacity={0.5}\r\n                            stroke={false}\r\n                        >\r\n                            {/* <Tooltip permanent={true} direction={'top'} className={'text 2'}>\r\n                                {resort._id}\r\n                            </Tooltip> */}\r\n                            <Tooltip>\r\n                                {resort._id} <br /> Snowfall: <br /> Past 24 Hours: {resort.snowreport.values.past24Hours} cm <br /> Past 48 Hrs: {resort.snowreport.values.past48Hours} cm <br /> Past\r\n                                7 Days: {resort.snowreport.values.past7Days} cm <br /> Time of Recording: {resort.snowreport.updateTime}\r\n                            </Tooltip>\r\n                        </CircleMarker>\r\n                    ))}\r\n                </MapContainer>\r\n\r\n                {/* <span\r\n          style={{ marginRight: 2 + \"em\", marginLeft: 1 + \"em\", minWidth: 3 + \"em\" }}\r\n          className={this.getBadgeClasses()}\r\n        >\r\n          {this.formatCount()}\r\n        </span>\r\n        <button\r\n        // pass reference of counter object cause it will make the implementation of the handler simpler\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n        // pass reference of counter object cause it will make the implementation of the handler simpler\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          -\r\n        </button>\r\n        <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button> */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // dynamically determine what to display in the count button\r\n    //   formatCount() {\r\n    //     const { value } = this.props.counter;\r\n    //     return value === 0 ? \"Zero\" : value;\r\n    //   }\r\n}\r\n\r\nexport default Map;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx",["70","71"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx",["72","73"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass FourtyEightHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create48HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past48Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past48Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 48 Hours Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create48HourSnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourtyEightHourSnowChart;\r\n",["74","75"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx",["76","77"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass SevenDaySnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create7DaySnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past7Days: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past7Days\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 7 Days Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create7DaySnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SevenDaySnowChart;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx",["78","79","80"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalDropDown.tsx",["81"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalDropdown.tsx",["82","83"],"import React, { Component } from 'react';\r\nimport { DropdownProps } from 'react-bootstrap';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { SelectCallback } from 'react-bootstrap/esm/helpers';\r\n\r\nclass IntervalDropdown extends Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    props = {\r\n        handleDropdownSelect: (e: any) => {}\r\n        // onSelect: (e: SelectCallback) => {}\r\n    };\r\n\r\n    // handleDropdownSelect = (e: any) => {\r\n    //     console.log(e);\r\n    // };\r\n\r\n    render() {\r\n        //const { handleDropdownSelect } = this.props;\r\n        return (\r\n            <Dropdown onSelect={(e: any) => this.props.handleDropdownSelect(e)}>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                    Snowfall Interval\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item eventKey=\"24Hours\">24 Hours</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"48Hours\" href=\"48Hours\">\r\n                        48 Hours\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"7Days\" href=\"7Days\">\r\n                        7 Days\r\n                    </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IntervalDropdown;\r\n",["84","85"],{"ruleId":"86","severity":1,"message":"87","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":23},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"86","severity":1,"message":"96","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":32},{"ruleId":"86","severity":1,"message":"97","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":25},{"ruleId":"86","severity":1,"message":"98","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":35},{"ruleId":"86","severity":1,"message":"99","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":24},{"ruleId":"86","severity":1,"message":"100","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":16},{"ruleId":"86","severity":1,"message":"101","line":10,"column":10,"nodeType":"88","messageId":"89","endLine":10,"endColumn":24},{"ruleId":"102","severity":1,"message":"103","line":64,"column":22,"nodeType":"104","messageId":"105","endLine":64,"endColumn":24},{"ruleId":"102","severity":1,"message":"103","line":66,"column":29,"nodeType":"104","messageId":"105","endLine":66,"endColumn":31},{"ruleId":"86","severity":1,"message":"106","line":3,"column":21,"nodeType":"88","messageId":"89","endLine":3,"endColumn":27},{"ruleId":"86","severity":1,"message":"107","line":3,"column":43,"nodeType":"88","messageId":"89","endLine":3,"endColumn":48},{"ruleId":"86","severity":1,"message":"108","line":3,"column":73,"nodeType":"88","messageId":"89","endLine":3,"endColumn":85},{"ruleId":"102","severity":1,"message":"103","line":48,"column":22,"nodeType":"104","messageId":"105","endLine":48,"endColumn":24},{"ruleId":"102","severity":1,"message":"103","line":50,"column":29,"nodeType":"104","messageId":"105","endLine":50,"endColumn":31},{"ruleId":"86","severity":1,"message":"109","line":3,"column":13,"nodeType":"88","messageId":"89","endLine":3,"endColumn":21},{"ruleId":"86","severity":1,"message":"110","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":65},{"ruleId":"86","severity":1,"message":"109","line":3,"column":13,"nodeType":"88","messageId":"89","endLine":3,"endColumn":21},{"ruleId":"86","severity":1,"message":"110","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":65},{"ruleId":"90","replacedBy":"111"},{"ruleId":"92","replacedBy":"112"},{"ruleId":"86","severity":1,"message":"109","line":3,"column":13,"nodeType":"88","messageId":"89","endLine":3,"endColumn":21},{"ruleId":"86","severity":1,"message":"110","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":65},{"ruleId":"86","severity":1,"message":"109","line":3,"column":13,"nodeType":"88","messageId":"89","endLine":3,"endColumn":21},{"ruleId":"86","severity":1,"message":"110","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":65},{"ruleId":"113","severity":1,"message":"114","line":100,"column":133,"nodeType":"115","messageId":"116","endLine":100,"endColumn":135},{"ruleId":"86","severity":1,"message":"101","line":3,"column":10,"nodeType":"88","messageId":"89","endLine":3,"endColumn":24},{"ruleId":"86","severity":1,"message":"117","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":23},{"ruleId":"86","severity":1,"message":"101","line":4,"column":10,"nodeType":"88","messageId":"89","endLine":4,"endColumn":24},{"ruleId":"90","replacedBy":"118"},{"ruleId":"92","replacedBy":"119"},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["120"],"no-negated-in-lhs",["121"],["120"],["121"],"'FourtyEightHourSnowChart' is defined but never used.","'SevenDaySnowChart' is defined but never used.","'IntervalSnowChartComparison' is defined but never used.","'IntervalDropdown' is defined but never used.","'format' is defined but never used.","'SelectCallback' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Marker' is defined but never used.","'Popup' is defined but never used.","'useMapEvents' is defined but never used.","'ReactDom' is defined but never used.","'ResolvedTypeReferenceDirectiveWithFailedLookupLocations' is defined but never used.",["120"],["121"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'DropdownProps' is defined but never used.",["120"],["121"],"no-global-assign","no-unsafe-negation"]