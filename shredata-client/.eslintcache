[{"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx":"1","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts":"2","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx":"3","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx":"4","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx":"5","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx":"6","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx":"7","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx":"8","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalDropDown.tsx":"9"},{"size":1731,"mtime":1609864103042,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":3595,"mtime":1609863919813,"results":"13","hashOfConfig":"11"},{"size":4195,"mtime":1609777163728,"results":"14","hashOfConfig":"11"},{"size":3426,"mtime":1609860602758,"results":"15","hashOfConfig":"11"},{"size":3394,"mtime":1609859968605,"results":"16","hashOfConfig":"11"},{"size":3370,"mtime":1609859968606,"results":"17","hashOfConfig":"11"},{"size":5633,"mtime":1609815079956,"results":"18","hashOfConfig":"11"},{"size":732,"mtime":1609863914830,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1356jc6",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx",["45"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts",[],["46","47"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx",["48","49","50","51"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx",["52"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { TileLayer, Marker, CircleMarker, Popup, MapContainer } from 'react-leaflet';\r\n\r\nclass Map extends Component {\r\n    // this method can decide whether an ajax call should be made to get new data based on props and state objects\r\n    //   componentDidUpdate(prevProps, prevState) {\r\n    //     console.log('prevProps', prevProps);\r\n    //     console.log('prevState', prevState);\r\n    //     if (prevProps.counter.value !== this.props.counter.value) {\r\n    //       // Ajax call and get new data\r\n    //     }\r\n    //   }\r\n    //   // opportunity to do any clean up before componenet is removed from the DOM - otherwise will end up with memory leaks\r\n    //   componentWillUnmount() {\r\n    //     console.log('Counter - Unmount');\r\n    //   }\r\n\r\n    constructor(\r\n        props: any\r\n        //  {\r\n        //     resorts: [\r\n        //         {\r\n        //             _id: 0,\r\n        //             latitude: 0,\r\n        //             longitude: 0,\r\n        //             snowreport: {\r\n        //                 values: {\r\n        //                     past24Hours: 0,\r\n        //                     past48Hours: 0,\r\n        //                     past7Days: 0\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     ]\r\n        // }\r\n    ) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        return (\r\n            <div>\r\n                <MapContainer center={[50.82793, -116.84341]} zoom={7.4} scrollWheelZoom={false}>\r\n                    <TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    {resorts.map((resort) => (\r\n                        <CircleMarker key={resort._id} center={[resort.latitude, resort.longitude]} radius={10 + resort.snowreport.values.past24Hours / 1.4} fillOpacity={0.5} stroke={false}>\r\n                            <Popup>\r\n                                {resort._id} <br /> Snowfall: <br /> Past 24 Hours: {resort.snowreport.values.past24Hours} cm <br /> Past 48 Hrs: {resort.snowreport.values.past48Hours} cm <br /> Past\r\n                                7 Days: {resort.snowreport.values.past7Days} cm <br /> Time of Recording: {resort.snowreport.updateTime}\r\n                            </Popup>\r\n                        </CircleMarker>\r\n                    ))}\r\n                </MapContainer>\r\n\r\n                {/* <span\r\n          style={{ marginRight: 2 + \"em\", marginLeft: 1 + \"em\", minWidth: 3 + \"em\" }}\r\n          className={this.getBadgeClasses()}\r\n        >\r\n          {this.formatCount()}\r\n        </span>\r\n        <button\r\n        // pass reference of counter object cause it will make the implementation of the handler simpler\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n        // pass reference of counter object cause it will make the implementation of the handler simpler\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          -\r\n        </button>\r\n        <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button> */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // dynamically determine what to display in the count button\r\n    //   formatCount() {\r\n    //     const { value } = this.props.counter;\r\n    //     return value === 0 ? \"Zero\" : value;\r\n    //   }\r\n}\r\n\r\nexport default Map;\r\n",["53","54"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx",["55","56"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass TwentyFourHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create24HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past24Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past24Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 24 Hours Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create24HourSnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        console.log(this.props);\r\n        return (\r\n            <div style={{ width: '30%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TwentyFourHourSnowChart;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx",["57","58"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass FourtyEightHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create48HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past48Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past48Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 48 Hours Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create48HourSnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourtyEightHourSnowChart;\r\n",["59","60"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx",["61","62"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass SevenDaySnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create7DaySnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past7Days: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past7Days\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 7 Days Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create7DaySnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SevenDaySnowChart;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx",["63","64","65"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalDropDown.tsx",[],{"ruleId":"66","severity":1,"message":"67","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":23},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"66","severity":1,"message":"74","line":4,"column":8,"nodeType":"68","messageId":"69","endLine":4,"endColumn":32},{"ruleId":"66","severity":1,"message":"75","line":5,"column":8,"nodeType":"68","messageId":"69","endLine":5,"endColumn":25},{"ruleId":"66","severity":1,"message":"76","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":35},{"ruleId":"66","severity":1,"message":"77","line":9,"column":10,"nodeType":"68","messageId":"69","endLine":9,"endColumn":16},{"ruleId":"66","severity":1,"message":"78","line":3,"column":21,"nodeType":"68","messageId":"69","endLine":3,"endColumn":27},{"ruleId":"70","replacedBy":"79"},{"ruleId":"72","replacedBy":"80"},{"ruleId":"66","severity":1,"message":"81","line":3,"column":13,"nodeType":"68","messageId":"69","endLine":3,"endColumn":21},{"ruleId":"66","severity":1,"message":"82","line":6,"column":10,"nodeType":"68","messageId":"69","endLine":6,"endColumn":65},{"ruleId":"66","severity":1,"message":"81","line":3,"column":13,"nodeType":"68","messageId":"69","endLine":3,"endColumn":21},{"ruleId":"66","severity":1,"message":"82","line":6,"column":10,"nodeType":"68","messageId":"69","endLine":6,"endColumn":65},{"ruleId":"70","replacedBy":"83"},{"ruleId":"72","replacedBy":"84"},{"ruleId":"66","severity":1,"message":"81","line":3,"column":13,"nodeType":"68","messageId":"69","endLine":3,"endColumn":21},{"ruleId":"66","severity":1,"message":"82","line":6,"column":10,"nodeType":"68","messageId":"69","endLine":6,"endColumn":65},{"ruleId":"66","severity":1,"message":"81","line":3,"column":13,"nodeType":"68","messageId":"69","endLine":3,"endColumn":21},{"ruleId":"66","severity":1,"message":"82","line":6,"column":10,"nodeType":"68","messageId":"69","endLine":6,"endColumn":65},{"ruleId":"85","severity":1,"message":"86","line":100,"column":133,"nodeType":"87","messageId":"88","endLine":100,"endColumn":135},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["89"],"no-negated-in-lhs",["90"],"'FourtyEightHourSnowChart' is defined but never used.","'SevenDaySnowChart' is defined but never used.","'IntervalSnowChartComparison' is defined but never used.","'format' is defined but never used.","'Marker' is defined but never used.",["89"],["90"],"'ReactDom' is defined but never used.","'ResolvedTypeReferenceDirectiveWithFailedLookupLocations' is defined but never used.",["89"],["90"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]