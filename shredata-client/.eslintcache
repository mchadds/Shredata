[{"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx":"1","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts":"2","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx":"3","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx":"4","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx":"5","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx":"6","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx":"7","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx":"8"},{"size":1683,"mtime":1610315191723,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":3369,"mtime":1610315191709,"results":"12","hashOfConfig":"10"},{"size":4195,"mtime":1610315191718,"results":"13","hashOfConfig":"10"},{"size":3426,"mtime":1610315191720,"results":"14","hashOfConfig":"10"},{"size":3394,"mtime":1609859968605,"results":"15","hashOfConfig":"10"},{"size":3370,"mtime":1609859968606,"results":"16","hashOfConfig":"10"},{"size":5633,"mtime":1609815079956,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1356jc6",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx",["42"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\reportWebVitals.ts",[],["43","44"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx",["45","46","47","48","49","50","51","52","53"],"import React, { Component } from 'react';\r\nimport Map from './components/Map';\r\nimport TwentyFourHourSnowChart from './components/TwentyFourHourSnowChart';\r\nimport FourtyEightHourSnowChart from './components/FourtyEightHourSnowChart';\r\nimport SevenDaySnowChart from './components/SevenDaySnowChart';\r\nimport IntervalSnowChartComparison from './components/IntervalSnowChartComparison';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        response: {\r\n            resorts: [\r\n                {\r\n                    _id: 0,\r\n                    latitude: 0,\r\n                    longitude: 0,\r\n                    snowreport: {\r\n                        updateTime: Date.now() - 1,\r\n                        values: {\r\n                            past24Hours: 0,\r\n                            past48Hours: 0,\r\n                            past7Days: 0\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        post: '',\r\n        responseToPost: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.callApi()\r\n            .then((res) => this.setState({ response: res }))\r\n            .catch((err) => console.log(err));\r\n    }\r\n\r\n    callApi = async () => {\r\n        const response = await fetch('/api/resorts/get/snowReportsByResort');\r\n        const body = await response.json();\r\n        if (response.status !== 200) throw Error(body.message);\r\n\r\n        return body;\r\n    };\r\n\r\n    handleSubmit = async (e: { preventDefault: () => void }) => {\r\n        e.preventDefault();\r\n        const response = await fetch('/api/world', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ post: this.state.post })\r\n        });\r\n        const body = await response.text();\r\n\r\n        this.setState({ responseToPost: body });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/* <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <p>\r\n                        Edit <code>src/App.js</code> and save to reload.\r\n                    </p>\r\n                    <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        Learn React\r\n                    </a>\r\n                </header>\r\n                <p>{this.state.response}</p>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <p>\r\n                        <strong>Post to Server:</strong>\r\n                    </p>\r\n                    <input type=\"text\" value={this.state.post} onChange={(e) => this.setState({ post: e.target.value })} />\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n                <p>{this.state.responseToPost}</p> */}\r\n\r\n                <Map resorts={this.state.response.resorts} />\r\n                <TwentyFourHourSnowChart resorts={this.state.response.resorts} />\r\n                <FourtyEightHourSnowChart resorts={this.state.response.resorts} />\r\n                <SevenDaySnowChart resorts={this.state.response.resorts} />\r\n                {/* <IntervalSnowChartComparison resorts={this.state.response.resorts} /> */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n",["54","55"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx",["56","57","58","59","60"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { TileLayer, Marker, CircleMarker, Popup, MapContainer, Tooltip, useMapEvents } from 'react-leaflet';\r\n\r\nclass Map extends Component {\r\n    // this method can decide whether an ajax call should be made to get new data based on props and state objects\r\n    //   componentDidUpdate(prevProps, prevState) {\r\n    //     console.log('prevProps', prevProps);\r\n    //     console.log('prevState', prevState);\r\n    //     if (prevProps.counter.value !== this.props.counter.value) {\r\n    //       // Ajax call and get new data\r\n    //     }\r\n    //   }\r\n    //   // opportunity to do any clean up before componenet is removed from the DOM - otherwise will end up with memory leaks\r\n    //   componentWillUnmount() {\r\n    //     console.log('Counter - Unmount');\r\n    //   }\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    props = {\r\n        state: {\r\n            response: {\r\n                resorts: [\r\n                    {\r\n                        _id: 0,\r\n                        latitude: 0,\r\n                        longitude: 0,\r\n                        snowreport: {\r\n                            updateTime: Date.now() - 1,\r\n                            values: {\r\n                                past24Hours: 0,\r\n                                past48Hours: 0,\r\n                                past7Days: 0\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            interval: '24 Hours'\r\n        }\r\n    };\r\n\r\n    getIntervalSnowFallValue(interval: string, resort: any) {\r\n        if (interval == '48 Hours') {\r\n            return resort.snowreport.values.past48Hours ? !null : 0;\r\n        } else if (interval == '7 Days') {\r\n            return resort.snowreport.values.past7Days;\r\n        } else {\r\n            return resort.snowreport.values.past24Hours;\r\n        }\r\n    }\r\n\r\n    //  map = useMapEvent('click', () => {\r\n    //     map.setCenter([50.5, 30.5])\r\n    //   })\r\n\r\n    render() {\r\n        const { interval } = this.props.state;\r\n        const { resorts } = this.props.state.response;\r\n        return (\r\n            <div>\r\n                <MapContainer center={[50.82793, -116.84341]} zoom={7.4} scrollWheelZoom={false}>\r\n                    <TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    {resorts.map((resort) => (\r\n                        <CircleMarker\r\n                            key={resort._id}\r\n                            center={[resort.latitude, resort.longitude]}\r\n                            radius={10 + this.getIntervalSnowFallValue(interval, resort) / 1.4}\r\n                            fillOpacity={0.5}\r\n                            stroke={false}\r\n                        >\r\n                            {/* <Tooltip permanent={true} direction={'top'} className={'text 2'}>\r\n                                {resort._id}\r\n                            </Tooltip> */}\r\n                            <Tooltip>\r\n                                {resort._id} <br /> Snowfall: <br /> Past 24 Hours: {resort.snowreport.values.past24Hours} cm <br /> Past 48 Hrs: {resort.snowreport.values.past48Hours} cm <br /> Past\r\n                                7 Days: {resort.snowreport.values.past7Days} cm <br /> Time of Recording: {resort.snowreport.updateTime}\r\n                            </Tooltip>\r\n                        </CircleMarker>\r\n                    ))}\r\n                </MapContainer>\r\n\r\n                {/* <span\r\n          style={{ marginRight: 2 + \"em\", marginLeft: 1 + \"em\", minWidth: 3 + \"em\" }}\r\n          className={this.getBadgeClasses()}\r\n        >\r\n          {this.formatCount()}\r\n        </span>\r\n        <button\r\n        // pass reference of counter object cause it will make the implementation of the handler simpler\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n        // pass reference of counter object cause it will make the implementation of the handler simpler\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          -\r\n        </button>\r\n        <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button> */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // dynamically determine what to display in the count button\r\n    //   formatCount() {\r\n    //     const { value } = this.props.counter;\r\n    //     return value === 0 ? \"Zero\" : value;\r\n    //   }\r\n}\r\n\r\nexport default Map;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx",["61","62"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass TwentyFourHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create24HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past24Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past24Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 24 Hours Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create24HourSnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        console.log(this.props);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TwentyFourHourSnowChart;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\FourtyEightHourSnowChart.tsx",["63","64"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass FourtyEightHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create48HourSnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past48Hours: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past48Hours\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 48 Hours Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create48HourSnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourtyEightHourSnowChart;\r\n",["65","66"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\SevenDaySnowChart.tsx",["67","68"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\n\r\nclass SevenDaySnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    props = {\r\n        resorts: [\r\n            {\r\n                _id: 0,\r\n                latitude: 0,\r\n                longitude: 0,\r\n                snowreport: {\r\n                    updateTime: Date.now() - 1,\r\n                    values: {\r\n                        past24Hours: 0,\r\n                        past48Hours: 0,\r\n                        past7Days: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    create7DaySnowfallSeries(resorts: any) {\r\n        return resorts.map((resort: { _id: any; snowreport: { values: { past7Days: any } } }) => {\r\n            return {\r\n                name: resort._id,\r\n                y: resort.snowreport.values.past7Days\r\n            };\r\n        });\r\n    }\r\n\r\n    createHighChartOptions(resorts: any) {\r\n        const options: Highcharts.Options = {\r\n            title: {\r\n                text: 'Past 7 Days Snowfall'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal'\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: this.create7DaySnowfallSeries(resorts)\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        const { resorts } = this.props;\r\n        this.options = this.createHighChartOptions(resorts);\r\n        return (\r\n            <div style={{ width: '55%' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SevenDaySnowChart;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\IntervalSnowChartComparison.tsx",["69","70","71"],{"ruleId":"72","severity":1,"message":"73","line":5,"column":8,"nodeType":"74","messageId":"75","endLine":5,"endColumn":23},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"72","severity":1,"message":"80","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":32},{"ruleId":"72","severity":1,"message":"81","line":5,"column":8,"nodeType":"74","messageId":"75","endLine":5,"endColumn":25},{"ruleId":"72","severity":1,"message":"82","line":6,"column":8,"nodeType":"74","messageId":"75","endLine":6,"endColumn":35},{"ruleId":"72","severity":1,"message":"83","line":7,"column":8,"nodeType":"74","messageId":"75","endLine":7,"endColumn":24},{"ruleId":"72","severity":1,"message":"84","line":9,"column":10,"nodeType":"74","messageId":"75","endLine":9,"endColumn":16},{"ruleId":"72","severity":1,"message":"85","line":10,"column":10,"nodeType":"74","messageId":"75","endLine":10,"endColumn":24},{"ruleId":"72","severity":1,"message":"86","line":11,"column":8,"nodeType":"74","messageId":"75","endLine":11,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":66,"column":22,"nodeType":"89","messageId":"90","endLine":66,"endColumn":24},{"ruleId":"87","severity":1,"message":"88","line":68,"column":29,"nodeType":"89","messageId":"90","endLine":68,"endColumn":31},{"ruleId":"76","replacedBy":"91"},{"ruleId":"78","replacedBy":"92"},{"ruleId":"72","severity":1,"message":"93","line":3,"column":21,"nodeType":"74","messageId":"75","endLine":3,"endColumn":27},{"ruleId":"72","severity":1,"message":"94","line":3,"column":43,"nodeType":"74","messageId":"75","endLine":3,"endColumn":48},{"ruleId":"72","severity":1,"message":"95","line":3,"column":73,"nodeType":"74","messageId":"75","endLine":3,"endColumn":85},{"ruleId":"87","severity":1,"message":"88","line":48,"column":22,"nodeType":"89","messageId":"90","endLine":48,"endColumn":24},{"ruleId":"87","severity":1,"message":"88","line":50,"column":29,"nodeType":"89","messageId":"90","endLine":50,"endColumn":31},{"ruleId":"72","severity":1,"message":"96","line":3,"column":13,"nodeType":"74","messageId":"75","endLine":3,"endColumn":21},{"ruleId":"72","severity":1,"message":"97","line":6,"column":10,"nodeType":"74","messageId":"75","endLine":6,"endColumn":65},{"ruleId":"72","severity":1,"message":"96","line":3,"column":13,"nodeType":"74","messageId":"75","endLine":3,"endColumn":21},{"ruleId":"72","severity":1,"message":"97","line":6,"column":10,"nodeType":"74","messageId":"75","endLine":6,"endColumn":65},{"ruleId":"76","replacedBy":"98"},{"ruleId":"78","replacedBy":"99"},{"ruleId":"72","severity":1,"message":"96","line":3,"column":13,"nodeType":"74","messageId":"75","endLine":3,"endColumn":21},{"ruleId":"72","severity":1,"message":"97","line":6,"column":10,"nodeType":"74","messageId":"75","endLine":6,"endColumn":65},{"ruleId":"72","severity":1,"message":"96","line":3,"column":13,"nodeType":"74","messageId":"75","endLine":3,"endColumn":21},{"ruleId":"72","severity":1,"message":"97","line":6,"column":10,"nodeType":"74","messageId":"75","endLine":6,"endColumn":65},{"ruleId":"100","severity":1,"message":"101","line":100,"column":133,"nodeType":"102","messageId":"103","endLine":100,"endColumn":135},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"'FourtyEightHourSnowChart' is defined but never used.","'SevenDaySnowChart' is defined but never used.","'IntervalSnowChartComparison' is defined but never used.","'IntervalDropdown' is defined but never used.","'format' is defined but never used.","'SelectCallback' is defined but never used.","'ButtonGroup' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["104"],["105"],"'Marker' is defined but never used.","'Popup' is defined but never used.","'useMapEvents' is defined but never used.","'ReactDom' is defined but never used.","'ResolvedTypeReferenceDirectiveWithFailedLookupLocations' is defined but never used.",["104"],["105"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]