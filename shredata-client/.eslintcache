[{"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx":"1","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx":"2","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx":"3","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx":"4"},{"size":338,"mtime":1611032040699,"results":"5","hashOfConfig":"6"},{"size":5700,"mtime":1611036434824,"results":"7","hashOfConfig":"6"},{"size":5423,"mtime":1611027946836,"results":"8","hashOfConfig":"6"},{"size":4414,"mtime":1611031943637,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1356jc6",{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\index.tsx",["22"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n",["23","24"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\App.tsx",["25","26","27","28"],"C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\TwentyFourHourSnowChart.tsx",["29","30","31","32","33"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport * as ReactDom from 'react-dom';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { ResolvedTypeReferenceDirectiveWithFailedLookupLocations } from 'typescript';\r\nimport { point } from 'leaflet';\r\n\r\nclass TwentyFourHourSnowChart extends Component {\r\n    options: Highcharts.Options;\r\n    // The wrapper exports only a default component class that at the same time is a\r\n    // namespace for the related Props interface (HighchartsReact.Props). All other\r\n    // interfaces like Options come from the Highcharts module itself.\r\n\r\n    constructor(props: any, options: Highcharts.Options) {\r\n        super(props, options);\r\n        this.props = props;\r\n        this.options = options;\r\n    }\r\n    // componentDidMount() {\r\n    //     // example of use\r\n    //     this.internalChart.addSeries({ data: [1, 2, 3] })\r\n    //   }\r\n\r\n    // props = {\r\n    //     resorts: [\r\n    //         {\r\n    //             _id: 0,\r\n    //             latitude: 0,\r\n    //             longitude: 0,\r\n    //             snowreport: {\r\n    //                 updateTime: Date.now() - 1,\r\n    //                 values: {\r\n    //                     past24Hours: 0,\r\n    //                     past48Hours: 0,\r\n    //                     past7Days: 0\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     ]\r\n    // };\r\n\r\n    props = {\r\n        seriesData: null,\r\n        interval: ''\r\n    };\r\n\r\n    // create24HourSnowfallSeries(resorts: any) {\r\n    //     return resorts.map((resort: { _id: any; snowreport: { values: { past24Hours: any } } }) => {\r\n    //         return {\r\n    //             name: resort._id,\r\n    //             y: resort.snowreport.values.past24Hours\r\n    //         };\r\n    //     });\r\n    // }\r\n\r\n    createHighChartOptions(\r\n        //resorts: any\r\n        seriesData: any,\r\n        interval: string\r\n    ) {\r\n        const options: Highcharts.Options = {\r\n            chart: {\r\n                height: '73%'\r\n            },\r\n            title: {\r\n                text: 'Past ' + interval + ' Snowfall (cm)'\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal',\r\n                    point: {\r\n                        events: {\r\n                            mouseOver: function (e) {\r\n                                let currentSelection = this.name;\r\n                                this.series.points.forEach(function (pt) {\r\n                                    if (pt.name != currentSelection) {\r\n                                        pt.setState('inactive');\r\n                                    } else {\r\n                                        pt.setState('hover');\r\n                                    }\r\n                                });\r\n                            },\r\n                            mouseOut: function (e) {\r\n                                let currentSelection = this.name;\r\n                                this.series.points.forEach(function (pt) {\r\n                                    pt.setState('');\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    //allowPointSelect: true\r\n                },\r\n                series: {\r\n                    borderWidth: 0,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.y} cm'\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span>Snowfall</span>: <b>{point.y} cm</b>'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                title: {\r\n                    text: 'Resorts'\r\n                }\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Snow'\r\n                },\r\n                labels: {\r\n                    format: '{value} cm'\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'column',\r\n                    name: 'Snowfall',\r\n                    data: seriesData\r\n                    //data: this.create24HourSnowfallSeries(resorts)\r\n                    // point: {\r\n                    //     events: {\r\n                    //         click: (e) => {\r\n                    //             console.log(e.point.name);\r\n                    //             console.log(this);\r\n                    //             //e.point.color = '#a4edba';\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                }\r\n            ],\r\n            legend: {\r\n                enabled: false\r\n            }\r\n        };\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        // const { resorts } = this.props;\r\n        // this.options = this.createHighChartOptions(resorts);\r\n        const { seriesData, interval } = this.props;\r\n        this.options = this.createHighChartOptions(seriesData, interval);\r\n        console.log(this.props);\r\n        return (\r\n            <div style={{ width: '45%', float: 'left', border: '4px solid silver', marginTop: '5vh' }}>\r\n                <HighchartsReact highcharts={Highcharts} options={{ ...this.options }} {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TwentyFourHourSnowChart;\r\n","C:\\Users\\cdund\\Desktop\\_\\Development\\Shredata\\shredata-client\\src\\components\\Map.tsx",["34","35","36","37","38","39"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { TileLayer, CircleMarker, MapContainer, Tooltip } from 'react-leaflet';\r\n\r\nclass Map extends Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    props = {\r\n        state: {\r\n            response: {\r\n                resorts: [\r\n                    {\r\n                        _id: 0,\r\n                        latitude: 0,\r\n                        longitude: 0,\r\n                        snowreport: {\r\n                            updateTime: Date.now() - 1,\r\n                            values: {\r\n                                past24Hours: 0,\r\n                                past48Hours: 0,\r\n                                past7Days: 0,\r\n                                base: 0\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            interval: '24 Hours'\r\n        }\r\n    };\r\n\r\n    getIntervalSnowFallValueForRadius(interval: string, resort: any) {\r\n        if (interval == '48 Hours') {\r\n            return resort.snowreport.values.past48Hours != null ? resort.snowreport.values.past48Hours : 0;\r\n        } else if (interval == '7 Days') {\r\n            return resort.snowreport.values.past7Days != null ? resort.snowreport.values.past7Days : 0;\r\n        } else if (interval == 'Base') {\r\n            // 4 because base numbers are high\r\n            return resort.snowreport.values.base != null ? resort.snowreport.values.base / 4 : 0;\r\n        } else {\r\n            return resort.snowreport.values.past24Hours;\r\n        }\r\n    }\r\n\r\n    getIntervalSnowFallValueForTooltip(interval: string, resort: any) {\r\n        if (interval == '48 Hours') {\r\n            return resort.snowreport.values.past48Hours != null ? resort.snowreport.values.past48Hours : 0;\r\n        } else if (interval == '7 Days') {\r\n            return resort.snowreport.values.past7Days != null ? resort.snowreport.values.past7Days : 0;\r\n        } else if (interval == 'Base') {\r\n            return resort.snowreport.values.base != null ? resort.snowreport.values.base : 0;\r\n        } else {\r\n            return resort.snowreport.values.past24Hours;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { interval } = this.props.state;\r\n        const { resorts } = this.props.state.response;\r\n        return (\r\n            <div>\r\n                <MapContainer center={[50.82793, -116.84341]} zoom={7.4} scrollWheelZoom={false}>\r\n                    <TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    {resorts.map((resort) => (\r\n                        <CircleMarker\r\n                            key={resort._id}\r\n                            center={[resort.latitude, resort.longitude]}\r\n                            radius={10 + this.getIntervalSnowFallValueForRadius(interval, resort) / 1.4}\r\n                            fillOpacity={0.5}\r\n                            stroke={false}\r\n                            eventHandlers={{\r\n                                mouseover: function (e) {\r\n                                    e.target._path.attributes['fill-opacity'].value = 1;\r\n                                    // console.log(e);\r\n                                    // console.log(this);\r\n                                },\r\n                                mouseout: function (e) {\r\n                                    e.target._path.attributes['fill-opacity'].value = 0.5;\r\n                                }\r\n                            }}\r\n                        >\r\n                            <Tooltip>\r\n                                <div>\r\n                                    {/* <p style={{ fontSize: '13px', textAlign: 'center' }}> */}\r\n                                    <b>{resort._id}</b>\r\n                                    {/* </p> */}\r\n                                    <br /> Past {interval}: {this.getIntervalSnowFallValueForTooltip(interval, resort)} cm\r\n                                    {/* <br /> Timestamp: {resort.snowreport.updateTime} */}\r\n                                </div>\r\n                            </Tooltip>\r\n                        </CircleMarker>\r\n                    ))}\r\n                </MapContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;\r\n",{"ruleId":"40","severity":1,"message":"41","line":6,"column":8,"nodeType":"42","messageId":"43","endLine":6,"endColumn":23},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"40","severity":1,"message":"48","line":51,"column":17,"nodeType":"42","messageId":"43","endLine":51,"endColumn":21},{"ruleId":"49","severity":1,"message":"50","line":87,"column":22,"nodeType":"51","messageId":"52","endLine":87,"endColumn":24},{"ruleId":"49","severity":1,"message":"50","line":89,"column":29,"nodeType":"51","messageId":"52","endLine":89,"endColumn":31},{"ruleId":"49","severity":1,"message":"50","line":91,"column":29,"nodeType":"51","messageId":"52","endLine":91,"endColumn":31},{"ruleId":"40","severity":1,"message":"53","line":3,"column":13,"nodeType":"42","messageId":"43","endLine":3,"endColumn":21},{"ruleId":"40","severity":1,"message":"54","line":6,"column":10,"nodeType":"42","messageId":"43","endLine":6,"endColumn":65},{"ruleId":"40","severity":1,"message":"55","line":7,"column":10,"nodeType":"42","messageId":"43","endLine":7,"endColumn":15},{"ruleId":"49","severity":1,"message":"56","line":77,"column":49,"nodeType":"51","messageId":"52","endLine":77,"endColumn":51},{"ruleId":"40","severity":1,"message":"57","line":85,"column":37,"nodeType":"42","messageId":"43","endLine":85,"endColumn":53},{"ruleId":"49","severity":1,"message":"50","line":36,"column":22,"nodeType":"51","messageId":"52","endLine":36,"endColumn":24},{"ruleId":"49","severity":1,"message":"50","line":38,"column":29,"nodeType":"51","messageId":"52","endLine":38,"endColumn":31},{"ruleId":"49","severity":1,"message":"50","line":40,"column":29,"nodeType":"51","messageId":"52","endLine":40,"endColumn":31},{"ruleId":"49","severity":1,"message":"50","line":49,"column":22,"nodeType":"51","messageId":"52","endLine":49,"endColumn":24},{"ruleId":"49","severity":1,"message":"50","line":51,"column":29,"nodeType":"51","messageId":"52","endLine":51,"endColumn":31},{"ruleId":"49","severity":1,"message":"50","line":53,"column":29,"nodeType":"51","messageId":"52","endLine":53,"endColumn":31},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["58"],"no-negated-in-lhs",["59"],"'snow' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ReactDom' is defined but never used.","'ResolvedTypeReferenceDirectiveWithFailedLookupLocations' is defined but never used.","'point' is defined but never used.","Expected '!==' and instead saw '!='.","'currentSelection' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]